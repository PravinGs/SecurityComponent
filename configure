#!/bin/bash
set -e -o pipefail
cd `dirname $0`

ROOT="/etc/scl"
DECODER="$ROOT/decoder"
IDS="$ROOT/ids"
CONFIGURATION_DIRECTORY="$ROOT/config/agent"
LOG_PATH="/etc/scl/log/" 
BUILD_DIRECTORY="/home/$USER/Builds"
echo "Checking Configuration directories.."

#creating root directory
if [ ! -d "$ROOT" ]; then
    echo "Root directory not found..."
    echo "Creating root directory..."
    mkdir -p "$ROOT"
else
    echo "Root directory found..."
fi

#check and create configuration directory
if [ ! -d "$CONFIGURATION_DIRECTORY" ]; then
    echo "Building Configuration directories..."
    mkdir -p "$CONFIGURATION_DIRECTORY" 
    echo "Directory created: $CONFIGURATION_DIRECTORY"
else
    echo "Directory already exists: $CONFIGURATION_DIRECTORY"
fi

#check and create configuration files
if [ ! -f "$CONFIGURATION_DIRECTORY/agent.config" ]; then   
    echo "Agent configuration not found..."
    echo "Writing new agent configuration file..."
    sudo cp config/agent.config "$CONFIGURATION_DIRECTORY"
else
    echo "Agent configuration file found..."
fi

if [ ! -f "$CONFIGURATION_DIRECTORY/schedule.config" ]; then 
    echo "Schedule configuration not found..."
    echo "Writing new schedule configuration file..."
    sudo cp config/schedule.config "$CONFIGURATION_DIRECTORY"
else    
    echo "Schedule configuration file found..."
fi

#check and create decoder directory and copy the decoder files
if [ ! -d "$DECODER" ]; then
    echo "Decoder directory not found..."
    echo "Creating decoder directory..."
    mkdir -p "$DECODER"
else
    echo "Decoder directory found..."
fi

if [ ! -d "$DECODER/decoder.xml" ]; then
    echo "Decoder file not found writing decoer file..."
    sudo cp decoder.xml "$DECODER"
else    
    echo "Decoder file exists"
fi

if [ ! -d "$ROOT/rules" ]; then
    echo "Rules directory not found..."
    echo "Creating rules directory..."
    echo "Rules directory is emtpty adding rules..."
    sudo cp -rf rules "$ROOT"
else
    echo "Rules directory found..."
fi

#check and create rules directory and add the ossec rules
ls -la "$ROOT/rules" > /dev/null 2>&1
if [ ! $? = 0 ]; then
    echo "Rules directory is emtpty adding rules..."
    sudo cp -rf rules "$ROOT"
else    
    echo "Rules directory not empty..."
fi     

if [ ! -d "$LOG_PATH" ]; then
    echo "Log directory not found..."
    echo "Creating new directoy:  $LOG_PATH"
    mkdir -p "$LOG_PATH" 
else
    echo "Found log directory: $LOG_PATH"
fi

if [ ! -f "$LOG_PATH/agent.log" ]; then
    echo "Log file not found..."
    echo "Log file created under: $LOG_PATH"
    touch "$LOG_PATH/agent.log" 
else   
    echo "Log file found:  $LOG_PATH/agent.log"
fi

# Check if necessary tools are available
command -v g++ >/dev/null 2>&1 || { echo >&2 "g++ is required but not installed. Aborting."; sudo apt install g++ -y; }

if [ ! -d "$BUILD_DIRECTORY" ]; then
    echo "Build directory not found..."
    echo "Creating Build directory..."
    mkdir -p "$BUILD_DIRECTORY"
fi
cd "$BUILD_DIRECTORY" 

sudo apt install -y libssl-dev libboost-all-dev cmake libpcre2-dev

# Check if pugixml is installed
if pkg-config --exists pugixml; then
    echo "pugixml found."
else
    if [ ! -d "pugixml" ]; then 
        echo "pugixml not found. Downloading and building..."
    else    
        sudo rm -rf pugixml
    fi
    git clone https://github.com/zeux/pugixml.git
    cd pugixml 
    mkdir build 
    cd build 
    cmake .. 
    make 
    sudo make install

    cd ../.. 
    echo "pugixml downloaded and built successfully"
fi

if pkg-config --exists libcurl; then
    echo "libcurl found."
else 
    echo "libcurl not found. Installing..."
    sudo apt update
    sudo apt install -y libcurl4-openssl-dev 
    echo "libcurl installed successfully"
fi

if pkg-config --exists jsoncpp; then
    echo "JSONCpp found."
else 
    echo "JSONCpp not found. Downloading and building..."
    # Add commands to download and build JSONCpp here
    # For example, you might download the source code and build it with CMake

    # Example using git and CMake
    git clone https://github.com/open-source-parsers/jsoncpp.git
    cd jsoncpp
    mkdir build
    cd build
    cmake ..
    make
    sudo make install
    cd ../..

    echo "JSONCpp downloaded and built successfully"
fi

if pkg-config --exists zlib; then
    echo "zlib found."
else 
    echo "zlib not found. Downloading and building..."
    # Add commands to download and build zlib here
    sudo apt update
    sudo apt install -y zlib1g-dev

    echo "zlib downloaded and built successfully"
fi

# if gcc -Wl,--no-as-needed -ldl -o /tmp/test_dynamic_load -xc /dev/null &> /dev/null; then
#     echo "-ldl found."
# else
#     echo "-ldl not found. Adding the flag."
#     # Add -ldl to the build flags
#     sudo apt update
#     sudo apt-get install -y libdl-dev
    
# fi

if pkg-config --exists amqpcpp; then
    echo "AMQPCPP found."
    if pkg-config --exists libev; then
        echo "libev found."
    else 
        echo "libev not found. Downloading and building..."
        # Add commands to download and build libev here
        # For example, you might download the source code and build it with Make

        # Example using curl and Make
        sudo apt update
        sudo apt install -y libev-dev

        echo "libev downloaded and built successfully"
    fi
fi

echo "Configuration complete."